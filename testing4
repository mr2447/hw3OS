#include "types.h"
#include "stat.h"
#include "user.h"

void
find_primes(int nice_value)
{
  int i, j;
  int is_prime;
  //int pid = getpid();

  for (i = 2; i < 10; i++) {  // Start from 2, as 1 is not prime
    is_prime = 1;  // Assume `i` is prime until proven otherwise

    for (j = 2; j * j <= i; j++) {
      if (i % j == 0) {
        is_prime = 0;  // Not prime if divisible
        break;
      }
    }

    if (is_prime) {
      //printf(1, "PID: %d, Nice: %d, Prime: %d\n", pid, nice_value, i);  // Print PID, nice value, and prime number
      printf(1, "Nice: %d\n", nice_value); 
    }
  }
}

int
main(void)
{
  int num_children = 5;
  int pid;
  int nice_values[] = {1, 3, 5, 2, 4};  // Assign a different nice value to each child
  int i, j;
  for (i = 0; i < num_children; i++) {
    pid = fork();
    if (pid < 0) {
      printf(1, "Fork failed\n");
      exit();
    } else if (pid == 0) {
      // Child process
      nice(getpid(), nice_values[i]);  // Set nice value for this child
      find_primes(nice_values[i]);  // Start prime-finding process, passing the nice value
      exit();  // Exit when done (in case we change to finite loop)
    }
    // Parent continues to fork other children
  }

  // Parent waits for a while to observe child outputs
  sleep(500);  // Adjust sleep duration as necessary to allow children to print

  // End all child processes after observation period
  for (j = 0; j < num_children; j++) {
    wait();  // Wait for each child process to finish
  }

  exit();
}
